package main

import (
	"log"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	botToken = "6796961656:AAGimXMVJzd0a1JwkFvSEqR28mbMQr2aL1k"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
type UserState struct {
	CurrentState string
	PrevState    string
}

var (
	bot             *tgbotapi.BotAPI
	userStates      = make(map[int64]*UserState)
	userStatesMutex sync.Mutex
	mainMenu        = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—à–∏ —É—Å–ª—É–≥–∏!"),
			tgbotapi.NewKeyboardButton("–û –Ω–∞—Å!"),
			tgbotapi.NewKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"),
		),
	)
	describeProblemMenu = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"),
			tgbotapi.NewKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"),
			tgbotapi.NewKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"),
		),
	)
	UslugiMenu = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"),
			tgbotapi.NewKeyboardButton("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–†–µ–º–æ–Ω—Ç –∏ –≤—ã–∫—É–ø"),
			tgbotapi.NewKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"),
		),
	)
)

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		handleUpdate(update)
	}
}

func handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
		handleMessage(update.Message)
	}
}

func handleMessage(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, message.Text)

	switch message.Text {
	case "/start":
		msg.ReplyMarkup = mainMenu
		mainMenu.ResizeKeyboard = true
		updateState(message.Chat.ID, "main_menu")
		msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüëá"
	case "–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É":
		msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:"
		msg.ReplyMarkup = describeProblemMenu
		describeProblemMenu.ResizeKeyboard = true
		updateState(message.Chat.ID, "describe_problem")
	case "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é":
		handleReturnToPreviousMenu(message.Chat.ID)
		return
	case "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!":
		msg.Text = `–í–∞—à–∏ –∏–¥–µ–∏ - –Ω–∞—à –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! üåü
		–ñ–¥–µ–º —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, –≤–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ! üí°üòä`
	case "–ù–∞—à–∏ —É—Å–ª—É–≥–∏!":
		msg.Text = `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –†–µ—à–µ–Ω–∏—è:
		–ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á. üåêüí° –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö. üöÄ
		
		–û–Ω–ª–∞–π–Ω-–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:
		–≠–∫–æ–Ω–æ–º—å—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è, –æ–±—â–∞—è—Å—å —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –æ–Ω–ª–∞–π–Ω. üí¨üíª –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞. üè°üîß
		
		–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:
		–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é. üõ†Ô∏èüîç –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. üåü
		
		–†–µ–º–æ–Ω—Ç –∏ –í—ã–∫—É–ø –¢–µ—Ö–Ω–∏–∫–∏:
		–†–µ—à–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞—à–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ ‚Äì –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. üîßüîÑ –ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –≤—ã–∫—É–ø—É –±/—É —Ç–µ—Ö–Ω–∏–∫–∏. üí∏üì±`

		msg.ReplyMarkup = UslugiMenu
		describeProblemMenu.ResizeKeyboard = true
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		handleOtherMessages(message)
	}

	bot.Send(msg)
}

func handleOtherMessages(message *tgbotapi.Message) {
	userState := getUserState(message.Chat.ID)
	switch userState.CurrentState {
	case "main_menu":
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
	case "describe_problem":
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
		// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
	}
}

func handleReturnToPreviousMenu(chatID int64) {
	userState := getUserState(chatID)
	if userState.PrevState != "" {
		// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = mainMenu
		mainMenu.ResizeKeyboard = true
		updateState(chatID, userState.PrevState)
		bot.Send(msg)
	} else {
		// –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é.")
		bot.Send(msg)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
func updateState(chatID int64, newState string) {
	userStatesMutex.Lock()
	defer userStatesMutex.Unlock()

	userState, ok := userStates[chatID]
	if !ok {
		userState = &UserState{}
		userStates[chatID] = userState
	}

	userState.PrevState = userState.CurrentState
	userState.CurrentState = newState
}

func getUserState(chatID int64) *UserState {
	userStatesMutex.Lock()
	defer userStatesMutex.Unlock()

	userState, ok := userStates[chatID]
	if !ok {
		userState = &UserState{}
		userStates[chatID] = userState
	}

	return userState
}
